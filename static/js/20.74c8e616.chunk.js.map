{"version":3,"file":"static/js/20.74c8e616.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/filter/filterSelectors.js","hooks/useFilter.js","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","Pages/ContactsPage/ContactsPage.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx"],"sourcesContent":["export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectAllContacts = state => state.contacts.items;\n","// import { styled } from '@mui/material';\nimport { Form } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const FormContainer = styled(Form)(() => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  width: '100%',\n  margin: '0 auto',\n}));\n\nexport const RowContainer = ({ children }) => (\n  <div\n    style={{\n      display: 'grid',\n      width: '100%',\n      gridTemplateColumns: '1fr 1fr',\n      justifyContent: 'center',\n      marginBottom: '16px',\n      gap: '8px',\n    }}\n  >\n    {children}\n  </div>\n);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Field } from 'formik';\nimport { object, string } from 'yup';\nimport { TextField, Button, Box } from '@mui/material';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { FormContainer, RowContainer } from './ContactForm.styled';\n\nconst numberRegex =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst numberMessage = `Phone number must be digits and can contain spaces, dashes, parentheses and can start with +`;\nconst nameMessage = `Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan`;\n\nconst schema = object({\n  name: string().matches(nameRegex, nameMessage).required(),\n  number: string().matches(numberRegex, numberMessage).required(),\n});\n\nconst CustomTextField = ({ name, label, placeholder }) => (\n  <Field name={name}>\n    {({ field, meta }) => (\n      <Box>\n        <TextField\n          {...field}\n          label={label}\n          fullWidth\n          placeholder={placeholder}\n          error={meta.touched && meta.error}\n          helperText={meta.touched && meta.error ? meta.error : ''}\n        />\n      </Box>\n    )}\n  </Field>\n);\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormContainer>\n        <RowContainer>\n          <CustomTextField\n            name=\"name\"\n            label=\"Name\"\n            placeholder=\"Enter the name\"\n          />\n          <CustomTextField\n            name=\"number\"\n            label=\"Number\"\n            placeholder=\"Enter the number\"\n          />\n        </RowContainer>\n        <Button variant=\"contained\" type=\"submit\">\n          Add Contact\n        </Button>\n      </FormContainer>\n    </Formik>\n  );\n}\n","export const selectFilter = state => state.filter;\n","import { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/filterSelectors';\n\nexport const useFilter = () => {\n  const filter = useSelector(selectFilter);\n\n  return {\n    filter,\n  };\n};\n","import styled from '@emotion/styled';\nimport { Box, Button } from '@mui/material';\n\nexport const StyledBox = styled(Box)`\n  gap: 8px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const StyledButton = styled(Button)`\n  margin-left: auto;\n  min-width: 7rem;\n`;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact, updateContact } from 'redux/contacts/operations';\nimport { TextField, Button, Typography } from '@mui/material';\n\nimport { StyledBox, StyledButton } from './ContactItem.styled';\n\nexport function ContactItem({ id, number, name }) {\n  const dispatch = useDispatch();\n  const [isEditMode, setEditing] = useState(false);\n  const [editedName, setEditedName] = useState(name);\n  const [editedNumber, setEditedNumber] = useState(number);\n\n  const onDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  const handleUpdate = () => {\n    const updatedContact = {\n      id,\n      name: editedName,\n      number: editedNumber,\n    };\n    dispatch(updateContact(updatedContact));\n    setEditing(false);\n  };\n\n  return (\n    <li>\n      {isEditMode ? (\n        <>\n          <StyledBox>\n            <TextField\n              type=\"text\"\n              focused\n              value={editedName}\n              variant=\"standard\"\n              onChange={e => setEditedName(e.target.value)}\n            />\n            <TextField\n              type=\"text\"\n              focused\n              value={editedNumber}\n              variant=\"standard\"\n              onChange={e => setEditedNumber(e.target.value)}\n            />\n            <StyledButton\n              onClick={handleUpdate}\n              variant=\"contained\"\n              color=\"success\"\n            >\n              Update\n            </StyledButton>\n            <Button\n              sx={{\n                minWidth: '7rem',\n              }}\n              onClick={() => setEditing(false)}\n              variant=\"contained\"\n              color=\"error\"\n            >\n              Cancel\n            </Button>\n          </StyledBox>\n        </>\n      ) : (\n        <StyledBox>\n          <Typography\n            sx={{\n              fontWeight: 'bold',\n            }}\n          >\n            {`${name}: `}\n          </Typography>\n          <Typography>{number}</Typography>\n          <StyledButton onClick={() => setEditing(true)} variant=\"contained\">\n            Edit\n          </StyledButton>\n          <Button\n            sx={{\n              minWidth: '7rem',\n            }}\n            onClick={onDelete}\n            variant=\"contained\"\n          >\n            Delete\n          </Button>\n        </StyledBox>\n      )}\n    </li>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  padding-left: 0;\n  gap: 12px;\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { useFilter } from 'hooks/useFilter';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const { filter } = useFilter();\n\n  const filteredContacts = React.useMemo(\n    () =>\n      contacts.filter(({ name }) =>\n        name.toLowerCase().includes(filter.toLowerCase())\n      ),\n    [contacts, filter]\n  );\n\n  return (\n    <List>\n      {filteredContacts.map(({ id, number, name }) => (\n        <ContactItem key={id} id={id} number={number} name={name} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TextField } from '@mui/material';\n\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { useFilter } from 'hooks/useFilter';\n\nexport function Filter() {\n  const { filter } = useFilter();\n\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <TextField\n      type=\"text\"\n      label=\"Find contacts by name\"\n      name=\"filter\"\n      placeholder=\"Enter your search\"\n      value={filter}\n      onChange={onChange}\n    />\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { Section } from 'components/Section/Section';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Legend = styled.legend`\n  font-size: 1.3rem;\n  font-weight: bold;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport { Legend } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Box sx={{ padding: 3 }} component=\"fieldset\">\n      <Legend>{title}</Legend>\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n"],"names":["selectLoading","state","contacts","isLoading","selectAllContacts","items","FormContainer","styled","Form","display","alignItems","justifyContent","flexDirection","width","margin","RowContainer","children","style","gridTemplateColumns","marginBottom","gap","schema","object","name","string","matches","required","number","CustomTextField","label","placeholder","field","meta","Box","TextField","fullWidth","error","touched","helperText","ContactForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","addContact","Button","variant","type","selectFilter","filter","useFilter","useSelector","StyledBox","StyledButton","ContactItem","id","useState","isEditMode","setEditing","editedName","setEditedName","editedNumber","setEditedNumber","focused","value","onChange","e","target","onClick","updatedContact","updateContact","color","sx","minWidth","Typography","fontWeight","deleteContact","List","filteredContacts","React","toLowerCase","includes","map","Filter","setFilter","ContactsPage","useEffect","fetchContacts","Helmet","Section","title","Legend","padding","component"],"sourceRoot":""}